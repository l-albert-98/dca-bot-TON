import time
import requests
from binance.client import Client
from binance.exceptions import BinanceAPIException
from telegram import Bot
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_KEY = os.getenv("BINANCE_API_KEY")
API_SECRET = os.getenv("BINANCE_API_SECRET")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

client = Client(API_KEY, API_SECRET)
bot = Bot(token=TELEGRAM_TOKEN)

symbol = "TONUSDT"
buy_price = None
sell_price = None

# === –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ===
min_qty = 1.0
step_size = 1.0
min_notional = 1.0
tick_size = 0.00001

def round_step(value, step):
    return round(value - (value % step), 8)

def get_price():
    try:
        ticker = client.get_symbol_ticker(symbol=symbol)
        return float(ticker["price"])
    except Exception as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return None

def place_order(order_type, quantity):
    try:
        quantity = round_step(quantity, step_size)
        if order_type == "BUY":
            return client.order_market_buy(symbol=symbol, quantity=quantity)
        else:
            return client.order_market_sell(symbol=symbol, quantity=quantity)
    except BinanceAPIException as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ {order_type}: {e}")
        return None

def send_message(text, color="gray"):
    emojis = {"red": "üîª", "yellow": "üü°", "green": "üü¢", "gray": "‚öôÔ∏è"}
    prefix = emojis.get(color, "‚öôÔ∏è") + " "
    try:
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=prefix + text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ Telegram: {e}")

def log(msg):
    print(msg)
    send_message(msg)

def report_external_ip():
    try:
        ip = requests.get("https://api.ipify.org").text
        log(f"üåê –í–Ω–µ—à–Ω–∏–π IP Railway: {ip}")
    except Exception as e:
        log(f"‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª IP: {e}")

def check_api_access():
    try:
        account_info = client.get_account()
        log("‚úÖ –î–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É –µ—Å—Ç—å")
    except Exception as e:
        log(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å API: {e}")
    report_external_ip()

def main():
    global buy_price, sell_price
    log("ü§ñ –ë–æ—Ç –¥–ª—è TON –∑–∞–ø—É—â–µ–Ω")
    check_api_access()

    while True:
        try:
            price = get_price()
            if price is None:
                time.sleep(10)
                continue

            log(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {price:.5f}")

            usdt_balance = float(client.get_asset_balance(asset="USDT")["free"])
            ton_balance = float(client.get_asset_balance(asset="TON")["free"])

            log(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt_balance:.2f}")
            log(f"ü™ô –ë–∞–ª–∞–Ω—Å TON: {ton_balance:.2f}")

            # === –ü–æ–∫—É–ø–∫–∞ ===
            if buy_price is None or price < buy_price * 0.985:
                if usdt_balance >= min_notional:
                    qty = usdt_balance / price
                    log(f"üõí –ü–æ–ø—ã—Ç–∫–∞ –∫—É–ø–∏—Ç—å TON –Ω–∞ {usdt_balance:.2f} USDT (–∫–æ–ª-–≤–æ: {qty:.2f})")
                    result = place_order("BUY", qty)
                    if result:
                        buy_price = price
                        sell_price = price * 1.02
                        log(f"üîª –ö—É–ø–∏–ª TON –ø–æ {price:.5f}, –≤—ã—Å—Ç–∞–≤–∏–ª –ø—Ä–æ–¥–∞–∂—É –ø–æ {sell_price:.5f}")
                    else:
                        log("‚ùå –ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                else:
                    log(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –ù—É–∂–Ω–æ ‚â• {min_notional}, —Å–µ–π—á–∞—Å {usdt_balance:.2f}")

            # === –ü—Ä–æ–¥–∞–∂–∞ ===
            elif sell_price and price > sell_price:
                if ton_balance >= min_qty:
                    log(f"üí∞ –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–∞—Ç—å {ton_balance:.2f} TON –ø–æ —Ü–µ–Ω–µ {price:.5f}")
                    result = place_order("SELL", ton_balance)
                    if result:
                        profit = ton_balance * (price - buy_price)
                        log(f"üü° –ü—Ä–æ–¥–∞–ª TON –ø–æ {price:.5f}")
                        log(f"üü¢ –ü—Ä–∏–±—ã–ª—å: {profit:.2f} USDT")
                        buy_price = None
                        sell_price = None
                    else:
                        log("‚ùå –ü—Ä–æ–¥–∞–∂–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
                else:
                    log(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –ù—É–∂–Ω–æ ‚â• {min_qty}, —Å–µ–π—á–∞—Å {ton_balance:.2f}")

        except Exception as e:
            log(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

        time.sleep(60)


if __name__ == "__main__":
    main()
