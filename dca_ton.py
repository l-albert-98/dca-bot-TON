import time
import requests
from binance.client import Client
from binance.exceptions import BinanceAPIException
from telegram import Bot
import os

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
API_KEY = os.getenv("BINANCE_API_KEY")
API_SECRET = os.getenv("BINANCE_API_SECRET")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

client = Client(API_KEY, API_SECRET)
bot = Bot(token=TELEGRAM_TOKEN)

symbol = "TONUSDT"
buy_price = None
sell_price = None

# === –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è TON ===
min_qty = 1.0
step_size = 1.0
min_notional = 1.0
tick_size = 0.00001


def round_step(value, step):
    return round(value - (value % step), 8)


def get_price():
    try:
        ticker = client.get_symbol_ticker(symbol=symbol)
        return float(ticker["price"])
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return None


def place_order(order_type, quantity):
    try:
        quantity = round_step(quantity, step_size)
        if order_type == "BUY":
            order = client.order_market_buy(symbol=symbol, quantity=quantity)
        else:
            order = client.order_market_sell(symbol=symbol, quantity=quantity)
        return order
    except BinanceAPIException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ {order_type} –æ—Ä–¥–µ—Ä–∞: {e}")
        return None


def send_message(text, color="gray"):
    emojis = {"red": "üîª", "yellow": "üü°", "green": "üü¢", "gray": "‚öôÔ∏è"}
    prefix = emojis.get(color, "") + " "
    try:
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=prefix + text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


def report_external_ip():
    try:
        ip = requests.get("https://api.ipify.org").text
        send_message(f"–í–Ω–µ—à–Ω–∏–π IP Railway: {ip}", color="gray")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP: {e}")


def check_api_access():
    try:
        account_info = client.get_account()
        print("‚úÖ –î–æ—Å—Ç—É–ø –∫ –∞–∫–∫–∞—É–Ω—Ç—É –µ—Å—Ç—å")
        send_message("‚úÖ API-–∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç", color="green")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        send_message(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å API: {e}", color="red")


def main():
    global buy_price, sell_price
    print("–ë–æ—Ç –¥–ª—è TON –∑–∞–ø—É—â–µ–Ω")
    report_external_ip()
    check_api_access()

    while True:
        try:
            price = get_price()
            if price is None:
                time.sleep(10)
                continue

            print(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {symbol}: {price:.5f}")

            balance = client.get_asset_balance(asset="USDT")
            usdt_balance = float(balance["free"])

            ton_balance = float(client.get_asset_balance(asset="TON")["free"])

            if buy_price is None or price < buy_price * 0.985:
                if usdt_balance >= min_notional:
                    qty = usdt_balance / price
                    result = place_order("BUY", qty)
                    if result:
                        buy_price = price
                        sell_price = price * 1.02
                        send_message(f"–ö—É–ø–∏–ª TON –ø–æ {price:.5f}", color="red")
                else:
                    print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏")

            elif sell_price and price > sell_price:
                if ton_balance >= min_qty:
                    result = place_order("SELL", ton_balance)
                    if result:
                        send_message(f"–ü—Ä–æ–¥–∞–ª TON –ø–æ {price:.5f}", color="yellow")
                        profit = ton_balance * price - ton_balance * buy_price
                        send_message(f"–ü—Ä–∏–±—ã–ª—å: {profit:.2f} USDT", color="green")
                        buy_price = None
                        sell_price = None
                else:
                    print("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ TON –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏")

        except Exception as e:
            print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

        time.sleep(60)


if __name__ == "__main__":
    main()
